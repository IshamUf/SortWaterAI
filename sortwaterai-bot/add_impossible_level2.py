#!/usr/bin/env python3
# add_inposible_level.py

import os
import json
import psycopg2
from psycopg2.extras import RealDictCursor
from datetime import datetime
from dotenv import load_dotenv

load_dotenv()

def get_db_config():
    return {
        "dbname":   os.getenv("POSTGRES_DB"),
        "user":     os.getenv("POSTGRES_USER"),
        "password": os.getenv("POSTGRES_PASSWORD"),
        "host":     "localhost",
        "port":     int(os.getenv("POSTGRES_PORT", 5432)),
    }

def main():
    db_config = get_db_config()
    # –ù–æ–≤—ã–π state, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å
    new_state = [
        [1, 0, 0, 1],
        [2, 1, 2, 0],
        [1, 2, 0, 2],
        [-1, -1, -1, -1],
        [-1, -1, -1,  1],
    ]
    # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ –æ–±—ä–µ–∫—Ç { "state": ... }
    level_data_json = json.dumps({"state": new_state})

    try:
        conn = psycopg2.connect(**db_config)
        cur  = conn.cursor(cursor_factory=RealDictCursor)

        # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —É—Ä–æ–≤–µ–Ω—å —Å id=2 —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        cur.execute('SELECT id, level_data FROM "Levels" WHERE id = %s', (2,))
        row = cur.fetchone()
        if not row:
            print("–£—Ä–æ–≤–µ–Ω—å —Å id=2 –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –í—ã–ø–æ–ª–Ω—è–µ–º UPDATE
        cur.execute(
            'UPDATE "Levels" '
            'SET level_data = %s, "updatedAt" = %s '
            'WHERE id = %s',
            (level_data_json, datetime.utcnow(), 2)
        )
        conn.commit()
        print("‚úÖ –£—Ä–æ–≤–µ–Ω—å id=2 —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω. –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
        print(json.dumps(new_state, ensure_ascii=False))

    except Exception as e:
        print("üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è:", e)
    finally:
        try:
            cur.close()
            conn.close()
        except:
            pass

if __name__ == "__main__":
    main()
